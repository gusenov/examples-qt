import QtQuick 2.13
import QtQuick.Window 2.13

Window {
    visible: true
    width: 640
    height: 480
    title: qsTr("Hello World")

    Rectangle {
        width: 300
        height: 150
        color: "orange"

        // Сигнал нашего примера отправляется при изменении
        // координат курсора мыши и отображает текущие его координаты.

        // Используя ключевое слово signal, мы вводим новый сигнал. Этот сигнал
        // передает дополнительную информацию о текущей позиции курсора мыши в двух переменных: х и у.
        signal mousePositionChanged(int х, int у)


        // Поскольку обработчики сигналов для сигналов создаются автоматически, сразу
        // же после введения нового сигнала, только лишь введя начальные буквы on, мы увидим, что
        // Qt Creator для выбора обработчиков отобразил нам список-подсказку, в котором мы обнаружим
        // и обработчик для нашего сигнала.
        // В этом обработчике при помощи идентификатора txt мы будем присваивать элементу текста
        // строку с текущим местоположением курсора и ссылаться на него.

        onMousePositionChanged:
            txt.text = "<h1>X:" + х + "; У:" + у + "</h1>"


        Text {
            id: txt
            text: "<h1>Move the Mouse</h1>"
            anchors.centerIn: parent
        }

        MouseArea {
            anchors.fill: parent
            hoverEnabled: true


            // Для того чтобы выслать сигнал надо выполнить вызов функции, который
            // осуществляется из области мыши в свойстве обработки onМousePositionChanged из
            // объекта предка. В сигнал передаются два значения: mousex и mouseY - с текущим местоположением
            // курсора мыши. Мы в этом примере предоставляем сигнал, которым можно пользоваться
            // со стороны, а в целях демонстрации используем его внутри самого элемента.

            onMouseXChanged: parent.mousePositionChanged(mouseX, mouseY)
            onMouseYChanged: parent.mousePositionChanged(mouseX, mouseY)
        }
    }
}
